package com.tugdualdevillers.underglow.ui.scan

import android.Manifest
import android.annotation.SuppressLint
import android.app.Activity
import android.bluetooth.BluetoothAdapter
import android.bluetooth.BluetoothDevice
import android.bluetooth.BluetoothGattCharacteristic
import android.bluetooth.BluetoothManager
import android.bluetooth.le.BluetoothLeScanner
import android.bluetooth.le.ScanCallback
import android.bluetooth.le.ScanFilter
import android.bluetooth.le.ScanResult
import android.bluetooth.le.ScanSettings
import android.content.Context
import android.content.Intent
import android.content.pm.PackageManager
import android.location.LocationManager
import android.net.Uri
import android.os.Build
import android.os.Bundle
import android.os.Handler
import android.os.Looper
import android.os.ParcelUuid
import android.provider.Settings
import android.view.View
import android.widget.Button
import android.widget.TextView
import android.widget.Toast
import androidx.activity.result.contract.ActivityResultContracts
import androidx.appcompat.app.AppCompatActivity
import androidx.core.app.ActivityCompat
import androidx.core.content.ContextCompat
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.RecyclerView
import com.google.android.material.dialog.MaterialAlertDialogBuilder
import com.tugdual.yunikon.ui.ble_scan.adapter.AdapteurPeripheriques
import com.tugdualdevillers.underglow.R
import com.tugdualdevillers.underglow.data.BluetoothLEManager
import com.tugdualdevillers.underglow.data.LocalPreferences
import com.tugdualdevillers.underglow.ui.light.LightActivity
import com.tugdualdevillers.underglow.ui.scan.rv_peripheriques.DataItemPeripheriques

class ScanActivity : AppCompatActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_scan)

        findViewById<Button>(R.id.buttonReScan).setOnClickListener{
            if(verifyPermissions()){
                setupBLE()
            }
        }

        // VÃ©rifier si l'intent contient la clÃ© "lastAddress"
        if (intent.hasExtra("lastAddress")) {
            // Si la clÃ© est prÃ©sente, rÃ©cupÃ©rez la valeur
            val receivedAdresse = intent.getStringExtra("lastAddress")

            setupRecycler()
            setupBLE()

            val lastDevice: BluetoothDevice? = bluetoothAdapter?.getRemoteDevice(receivedAdresse)
            BluetoothLEManager.setCurrentDevice(lastDevice)
            connectToCurrentDevice()
        } else {
            // Si la clÃ© n'est pas prÃ©sente, cela signifie qu'il n'y a pas de paramÃ¨tre

            if (!hasPermission()){
                askForPermission()
            }
            setupRecycler()
            setupBLE()
        }
    }

    override fun onResume() {
        super.onResume()

        bleDevicesFoundList.clear()
        findViewById<RecyclerView>(R.id.recyclerViewPeripheriques).adapter?.notifyDataSetChanged()
        findViewById<TextView>(R.id.textViewNoDeviceDetected).visibility = View.VISIBLE

        if(verifyPermissions()){
            // Lancer suite => Activation BLE + Lancer Scan
            setupBLE()
        }
    }

    private fun verifyPermissions(): Boolean {
        if (!packageManager.hasSystemFeature(PackageManager.FEATURE_BLUETOOTH_LE)) {
            // Test si le tÃ©lÃ©phone est compatible BLE, si c'est pas le cas, on finish() l'activity
            Toast.makeText(this, getString(R.string._permission_toast_not_compatible_BLE), Toast.LENGTH_SHORT).show()
            finish()
        } else if (hasPermission() && locationServiceEnabled()) {
            // tout est ok, on a bien les permissions
            return true
        } else if(!hasPermission()) {
            // On demande la permission
            askForPermission()
        } else {
            // On demande d'activer la localisation
            // IdÃ©alement on demande avec un activitÃ©.
            // Ã€ vous de me proposer mieux (Une activitÃ©, une dialog, etc)
            startActivity(Intent(Settings.ACTION_LOCATION_SOURCE_SETTINGS))
        }
        return false
    }

    // Gestion du Bluetooth
    // L'Adapter permettant de se connecter
    private var bluetoothAdapter: BluetoothAdapter? = null

    // La connexion actuellement Ã©tablie
    //private var currentBluetoothGatt: BluetoothGatt? = null

    // Â« Interface systÃ¨me nous permettant de scanner Â»
    private var bluetoothLeScanner: BluetoothLeScanner? = null

    // Parametrage du scan BLE
    private val scanSettings = ScanSettings.Builder().setScanMode(ScanSettings.SCAN_MODE_LOW_LATENCY).build()

    // On ne retourne que les Â« Devices Â» proposant le bon UUID
    private var scanFilters: List<ScanFilter> = arrayListOf(
        ScanFilter.Builder().setServiceUuid(ParcelUuid(BluetoothLEManager.DEVICE_UUID)).build()
    )

    // Variable de fonctionnement
    private var mScanning = false
    private val handler = Handler(Looper.getMainLooper())

    // DataSource de notre adapter.
    private val bleDevicesFoundList = arrayListOf<DataItemPeripheriques>() //mutableListOf

    private val PERMISSION_REQUEST_LOCATION = 99

    /**
     * GÃ¨re l'action aprÃ¨s la demande de permission.
     * 2 cas possibles :
     * - RÃ©ussite ðŸŽ‰.
     * - Ã‰chec (refus utilisateur).
     */
    override fun onRequestPermissionsResult(requestCode: Int, permissions: Array<out String>, grantResults: IntArray) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults)

        if (requestCode == PERMISSION_REQUEST_LOCATION) {
            if (grantResults[0] == PackageManager.PERMISSION_GRANTED && locationServiceEnabled()) {
                // Permission OK & service de localisation actif => Nous pouvons lancer l'initialisation du BLE.
                // En appelant la mÃ©thode setupBLE(), La mÃ©thode setupBLE() va initialiser le BluetoothAdapter et lancera le scan.
            } else if (!locationServiceEnabled()) {
                // Inviter Ã  activer la localisation
                startActivity(Intent(Settings.ACTION_LOCATION_SOURCE_SETTINGS))
            } else {
                // Permission KO => GÃ©rer le cas d'erreur (permission refusÃ©)
                MaterialAlertDialogBuilder(this)
                    .setTitle(resources.getString(R.string._permission_required_dialog_title))
                    .setMessage(resources.getString(R.string._permission_required_dialog_message))
                    .setNegativeButton(resources.getString(R.string._permission_required_dialog_negative)) { dialog, which ->
                        finish()
                    }
                    .setPositiveButton(resources.getString(R.string._permission_required_dialog_positive)) { dialog, which ->
                        startActivity(Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS).apply {
                            data = Uri.fromParts("package", packageName, null)
                        })
                    }
                    .show()
            }
        }
    }

    /**
     * Permet de vÃ©rifier si l'application possede la permission Â« Localisation Â». OBLIGATOIRE pour scanner en BLE
     * Sur Android 11, il faut la permission Â« BLUETOOTH_CONNECT Â» et Â« BLUETOOTH_SCAN Â»
     * Sur Android 10 et infÃ©rieur, il faut la permission Â« ACCESS_FINE_LOCATION Â» qui permet de scanner en BLE
     */
    private fun hasPermission(): Boolean {
        return if (Build.VERSION.SDK_INT < Build.VERSION_CODES.S) {
            ContextCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) == PackageManager.PERMISSION_GRANTED
        } else {
            ContextCompat.checkSelfPermission(this, Manifest.permission.BLUETOOTH_CONNECT) == PackageManager.PERMISSION_GRANTED && ContextCompat.checkSelfPermission(this, Manifest.permission.BLUETOOTH_SCAN) == PackageManager.PERMISSION_GRANTED
        }
    }

    /**
     * Demande de la permission (ou des permissions) Ã  l'utilisateur.
     * Sur Android 11, il faut la permission Â« BLUETOOTH_CONNECT Â» et Â« BLUETOOTH_SCAN Â»
     * Sur Android 10 et infÃ©rieur, il faut la permission Â« ACCESS_FINE_LOCATION Â» qui permet de scanner en BLE
     */
    private fun askForPermission() {
        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.S) {
            ActivityCompat.requestPermissions(this, arrayOf(Manifest.permission.ACCESS_FINE_LOCATION), PERMISSION_REQUEST_LOCATION)
        } else {
            ActivityCompat.requestPermissions(this, arrayOf(Manifest.permission.BLUETOOTH_CONNECT, Manifest.permission.BLUETOOTH_SCAN), PERMISSION_REQUEST_LOCATION)
        }
    }

    private fun locationServiceEnabled(): Boolean {
        return if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.P) {
            // This is new method provided in API 28
            val lm = this.getSystemService(Context.LOCATION_SERVICE) as LocationManager
            lm.isLocationEnabled
        } else {
            // This is Deprecated in API 28
            val mode = Settings.Secure.getInt(this.contentResolver, Settings.Secure.LOCATION_MODE, Settings.Secure.LOCATION_MODE_OFF)
            mode != Settings.Secure.LOCATION_MODE_OFF
        }
    }

    /**
     * La mÃ©thode Â« registerForActivityResult Â» permet de gÃ©rer le rÃ©sultat d'une activitÃ©.
     * Ce code est appelÃ© Ã  chaque fois que l'utilisateur rÃ©pond Ã  la demande d'activation du Bluetooth (visible ou non)
     * Si l'utilisateur accepte et donc que le BLE devient disponible, on lance le scan.
     * Si l'utilisateur refuse, on affiche un message d'erreur (Toast).
     */
    val registerForResult = registerForActivityResult(ActivityResultContracts.StartActivityForResult()) {
        if (it.resultCode == Activity.RESULT_OK) {
            // Le Bluetooth est activÃ©, on lance le scan
            scanLeDevice()
        } else {
            // Bluetooth non activÃ©, vous DEVEZ gÃ©rer ce cas autrement qu'avec un Toast.
            Toast.makeText(this, "Bluetooth non activÃ©", Toast.LENGTH_SHORT).show()
        }
    }

    /**
     * RÃ©cupÃ©ration de l'adapter Bluetooth & vÃ©rification si celui-ci est actif.
     * Si il n'est pas actif, on demande Ã  l'utilisateur de l'activer. Dans ce cas, au rÃ©sultat le code prÃ©sent dans Â« registerForResult Â» sera appelÃ©.
     * Si il est dÃ©jÃ  actif, on lance le scan.
     */
    @SuppressLint("MissingPermission")
    private fun setupBLE() {
        (getSystemService(BLUETOOTH_SERVICE) as BluetoothManager?)?.let { bluetoothManager ->
            bluetoothAdapter = bluetoothManager.adapter
            if (bluetoothAdapter != null && !bluetoothManager.adapter.isEnabled) {
                registerForResult.launch(Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE))
            } else {
                scanLeDevice()
            }
        }
    }

    // Le scan va durer 10 secondes seulement, sauf si vous passez une autre valeur comme paramÃ¨tre.
    @SuppressLint("MissingPermission")
    private fun scanLeDevice(scanPeriod: Long = 10000) {

        if (!mScanning) {
            bluetoothLeScanner = bluetoothAdapter?.bluetoothLeScanner

            // On vide la liste qui contient les devices actuellement trouvÃ©s
            bleDevicesFoundList.clear()
            // Indique Ã  l'adapter que nous avons vidÃ© la liste
            findViewById<RecyclerView>(R.id.recyclerViewPeripheriques).adapter?.notifyDataSetChanged()

            findViewById<TextView>(R.id.textViewNoDeviceDetected).visibility = View.VISIBLE

            // Ã‰vite de scanner en double
            mScanning = true

            // On lance une tache qui durera Â« scanPeriod Â» Ã  savoir donc de base 10 secondes
            handler.postDelayed({
                mScanning = false
                bluetoothLeScanner?.stopScan(leScanCallback)
                Toast.makeText(this, getString(R.string._scan_activity_toast_scan_ended), Toast.LENGTH_SHORT).show()
            }, scanPeriod)

            // On lance le scan
            bluetoothLeScanner?.startScan(scanFilters, scanSettings, leScanCallback)
        }
    }

    // Callback appelÃ© Ã  chaque pÃ©riphÃ©rique trouvÃ©.
    private val leScanCallback: ScanCallback = object : ScanCallback() {
        @SuppressLint("MissingPermission")
        override fun onScanResult(callbackType: Int, result: ScanResult) {
            super.onScanResult(callbackType, result)

            val device = DataItemPeripheriques(result.device.name, result.device.address, result.device, R.drawable.bluetooth) {
                //Toast.makeText(this@ScanActivity, "connection to : ${result.device.address}", Toast.LENGTH_SHORT).show()
                BluetoothLEManager.setCurrentDevice(result.device)
                connectToCurrentDevice()

                /*val intentC = Intent(this@ScanActivity, LightActivity::class.java).apply {
                    putExtra("DEVICE_TO_CONNECT_ID", result.device)
                }
                startActivity(intentC)*/
            }


            if (!device.title.isNullOrBlank() && !bleDevicesFoundList.contains(device)) {
                bleDevicesFoundList.add(device)
                findViewById<TextView>(R.id.textViewNoDeviceDetected).visibility = View.INVISIBLE

                //Toast.makeText(this@ScanActivity, "${device.title} ajoutÃ©", Toast.LENGTH_SHORT).show()

                // Indique Ã  l'adapter que nous avons ajoutÃ© un Ã©lÃ©ment, il va donc se mettre Ã  jour
                findViewById<RecyclerView>(R.id.recyclerViewPeripheriques).adapter?.notifyItemInserted(bleDevicesFoundList.size - 1)
            }
        }
    }

    /*
     * MÃ©thode qui initialise le recycler view.
     */
    private fun setupRecycler() {
        val rvDevice = findViewById<RecyclerView>(R.id.recyclerViewPeripheriques) // RÃ©cupÃ©ration du RecyclerView prÃ©sent dans le layout
        rvDevice.layoutManager = LinearLayoutManager(this) // DÃ©finition du LayoutManager, Comment vont Ãªtre affichÃ©s les Ã©lÃ©ments, ici en liste
        rvDevice.adapter = AdapteurPeripheriques(bleDevicesFoundList)
    }


    @SuppressLint("MissingPermission")
    private fun connectToCurrentDevice() {
        BluetoothLEManager.currentDevice()?.let { device ->
            Toast.makeText(this, getString(R.string._scan_activity_toast_connecting, device), Toast.LENGTH_SHORT).show()

            BluetoothLEManager.currentBluetoothGatt = device.connectGatt(
                this,
                false,
                BluetoothLEManager.GattCallback(
                    onConnect = {
                        // On indique Ã  l'utilisateur que nous sommes correctement connectÃ©
                        runOnUiThread {
                            // Nous sommes connectÃ© au device, on active les notifications pour Ãªtre notifiÃ© si la LED change d'Ã©tat.
                            // On sauvegarde dans les Â« LocalPrÃ©fÃ©rence Â» de l'application le nom du dernier prÃ©phÃ©rique
                            // sur lequel nous nous sommes connectÃ©
                            val localPreferences = LocalPreferences.getInstance(this)
                            localPreferences.lastConnectedDeviceName(device.name)
                            localPreferences.lastConnectedDeviceAddress(device.address)

                            val intentC = Intent(this@ScanActivity, LightActivity::class.java)
                            startActivity(intentC)
                        }
                    },
                    onNotify = { runOnUiThread {
                        when (it.uuid) {
                            BluetoothLEManager.CHARACTERISTIC_NOTIFY_STATE -> {
                                handleToggleLedNotificationUpdate(it)
                            }
                            BluetoothLEManager.CHARACTERISTIC_GET_COUNT -> {
                                handleCountLedChangeNotificationUpdate(it)
                            }
                            BluetoothLEManager.CHARACTERISTIC_GET_WIFI_SCAN -> {
                                handleOnNotifyNotificationReceived(it)
                            }
                        }
                    } },
                    onDisconnect = { runOnUiThread {
                        disconnectFromCurrentDevice()
                        Toast.makeText(this@ScanActivity, getString(R.string._light_activity_toast_disconnected), Toast.LENGTH_SHORT).show()
                    } })
            )
        }
    }

    private fun handleToggleLedNotificationUpdate(characteristic: BluetoothGattCharacteristic) {
        BluetoothLEManager.setIsLedOn(characteristic.getStringValue(0).equals("1", ignoreCase = true))
    }

    private fun handleCountLedChangeNotificationUpdate(characteristic: BluetoothGattCharacteristic) {
        BluetoothLEManager.setNbSwitch(characteristic.getIntValue(BluetoothGattCharacteristic.FORMAT_UINT32, 0))
    }

    private fun handleOnNotifyNotificationReceived(characteristic: BluetoothGattCharacteristic) {
        // Vous pouvez ici rÃ©cupÃ©rer la liste des rÃ©seaux WiFi disponibles et les afficher dans une liste.
        // Vous pouvez utiliser un RecyclerView pour afficher la liste des rÃ©seaux WiFi disponibles.
    }

    /**
     * On demande la dÃ©connexion du device
     */
    @SuppressLint("MissingPermission")
    private fun disconnectFromCurrentDevice() {
        BluetoothLEManager.currentBluetoothGatt?.disconnect()
        BluetoothLEManager.setCurrentDevice(null)
    }

}